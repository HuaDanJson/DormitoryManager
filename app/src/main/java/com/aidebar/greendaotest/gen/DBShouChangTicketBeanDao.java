package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dormitory.myoschinatest.bean.DBShouChangTicketBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSHOU_CHANG_TICKET_BEAN".
*/
public class DBShouChangTicketBeanDao extends AbstractDao<DBShouChangTicketBean, Long> {

    public static final String TABLENAME = "DBSHOU_CHANG_TICKET_BEAN";

    /**
     * Properties of entity DBShouChangTicketBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreatTimeAsId = new Property(0, long.class, "creatTimeAsId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "DBShouChangTicketBean");
        public final static Property BuyerName = new Property(2, String.class, "buyerName", false, "BUYER_NAME");
        public final static Property BuyerOld = new Property(3, String.class, "buyerOld", false, "BUYER_OLD");
        public final static Property BuyerTel = new Property(4, String.class, "buyerTel", false, "BUYER_TEL");
        public final static Property BuyerMail = new Property(5, String.class, "buyerMail", false, "BUYER_MAIL");
        public final static Property JingdainMing = new Property(6, String.class, "jingdainMing", false, "JINGDAIN_MING");
        public final static Property Position = new Property(7, int.class, "position", false, "POSITION");
    }


    public DBShouChangTicketBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBShouChangTicketBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSHOU_CHANG_TICKET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: creatTimeAsId
                "\"DBShouChangTicketBean\" TEXT," + // 1: userName
                "\"BUYER_NAME\" TEXT," + // 2: buyerName
                "\"BUYER_OLD\" TEXT," + // 3: buyerOld
                "\"BUYER_TEL\" TEXT," + // 4: buyerTel
                "\"BUYER_MAIL\" TEXT," + // 5: buyerMail
                "\"JINGDAIN_MING\" TEXT," + // 6: jingdainMing
                "\"POSITION\" INTEGER NOT NULL );"); // 7: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSHOU_CHANG_TICKET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBShouChangTicketBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String buyerName = entity.getBuyerName();
        if (buyerName != null) {
            stmt.bindString(3, buyerName);
        }
 
        String buyerOld = entity.getBuyerOld();
        if (buyerOld != null) {
            stmt.bindString(4, buyerOld);
        }
 
        String buyerTel = entity.getBuyerTel();
        if (buyerTel != null) {
            stmt.bindString(5, buyerTel);
        }
 
        String buyerMail = entity.getBuyerMail();
        if (buyerMail != null) {
            stmt.bindString(6, buyerMail);
        }
 
        String jingdainMing = entity.getJingdainMing();
        if (jingdainMing != null) {
            stmt.bindString(7, jingdainMing);
        }
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBShouChangTicketBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String buyerName = entity.getBuyerName();
        if (buyerName != null) {
            stmt.bindString(3, buyerName);
        }
 
        String buyerOld = entity.getBuyerOld();
        if (buyerOld != null) {
            stmt.bindString(4, buyerOld);
        }
 
        String buyerTel = entity.getBuyerTel();
        if (buyerTel != null) {
            stmt.bindString(5, buyerTel);
        }
 
        String buyerMail = entity.getBuyerMail();
        if (buyerMail != null) {
            stmt.bindString(6, buyerMail);
        }
 
        String jingdainMing = entity.getJingdainMing();
        if (jingdainMing != null) {
            stmt.bindString(7, jingdainMing);
        }
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBShouChangTicketBean readEntity(Cursor cursor, int offset) {
        DBShouChangTicketBean entity = new DBShouChangTicketBean( //
            cursor.getLong(offset + 0), // creatTimeAsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // buyerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyerOld
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buyerTel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // buyerMail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jingdainMing
            cursor.getInt(offset + 7) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBShouChangTicketBean entity, int offset) {
        entity.setCreatTimeAsId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuyerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuyerOld(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBuyerTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuyerMail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJingdainMing(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPosition(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBShouChangTicketBean entity, long rowId) {
        entity.setCreatTimeAsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBShouChangTicketBean entity) {
        if(entity != null) {
            return entity.getCreatTimeAsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBShouChangTicketBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
